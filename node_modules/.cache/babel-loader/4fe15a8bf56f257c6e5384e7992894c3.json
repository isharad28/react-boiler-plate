{"ast":null,"code":"import { CancelToken } from \"axios\";\nimport { actionChannel, take, fork, call, put } from \"redux-saga/effects\";\nimport getAxios from \"./axiosAPI\"; // import { setStartLoader, setStopLoader } from \"../action/loader\";\n\nimport { logout } from \"../../utils/token\"; // import { setPageLoaderStop, setPageLoaderStart, showToastMessage } from \"../action/loader/loader\";\n// import { logoutUser, resetUserProfile, clearCartData } from \"../action/user\";\n\nconst pendingRequests = {};\n\nconst similarPendingRequestExist = (actionType, url) => pendingRequests[actionType] && pendingRequests[actionType].url === url;\n\nfunction* invokeAPI(action) {\n  const {\n    payload\n  } = action;\n  const {\n    method,\n    url,\n    data,\n    apiConfig,\n    action: actionType,\n    resolve,\n    reject\n  } = payload;\n\n  try {\n    if (action.payload.action !== \"ADD_TO_CART\") {\n      yield put(setStartLoader());\n    }\n\n    let response = {};\n    const api = getAxios();\n    console.log(api);\n    debugger;\n\n    switch (method) {\n      case \"GET\":\n        {\n          if (similarPendingRequestExist(actionType, url)) {\n            throw new Error(\"Similar axios request detected!\");\n          } else {\n            const source = CancelToken.source();\n            const cancelToken = source.token;\n            pendingRequests[actionType] = {\n              url,\n              api,\n              source\n            };\n            response = yield call([api, api.get], url, { ...apiConfig,\n              cancelToken\n            });\n          }\n\n          break;\n        }\n\n      case \"POST\":\n        response = yield call([api, api.post], url, data, { ...apiConfig\n        });\n        break;\n\n      case \"PUT\":\n        response = yield call([api, api.put], url, data, { ...apiConfig\n        });\n        break;\n\n      case \"PATCH\":\n        response = yield call([api, api.patch], url, data, { ...apiConfig\n        });\n        break;\n\n      case \"DELETE\":\n        response = yield call([api, api.delete], url, {\n          data\n        }, { ...apiConfig\n        });\n        break;\n\n      default:\n        throw new Error(`API method ${method} is not supported!`);\n    } // debugger;\n\n\n    if (response.status === Number(200) || response.status === Number(201)) {\n      yield* dispatchFulfilled(action, response.data); // yield put(showToastMessage({ message: _get(response, 'data.message', ''), type: _get(response, 'data.type', '') }));\n    } else {\n      yield* dispatchRejected(payload.action, action, \"Internal server error\"); // yield put(showToastMessage({ message: 'Internal error, Try again', type: 'error' }));\n    }\n\n    delete pendingRequests[actionType];\n\n    if (resolve) {\n      resolve(response.data);\n    }\n  } catch (error) {\n    if (error.response && error.response.status === 401) {\n      yield put(logoutUser());\n      yield put(resetUserProfile());\n      yield put(clearCartData());\n      logout();\n    }\n\n    yield* dispatchRejected(payload.action, action, error);\n\n    if (reject) {\n      reject(error);\n    } // yield put(showToastMessage({ message: 'Internal error, Try again', type: 'error' }));\n\n  } finally {\n    yield put(setStopLoader());\n  }\n}\n\nfunction* dispatchFulfilled(action, response) {\n  yield put({\n    type: `${action.payload.action}_SUCCESS`,\n    payload: response\n  });\n}\n\nfunction* dispatchRejected(actionType, action, error) {\n  yield put({\n    type: `${actionType}_ERROR`,\n    actualAction: action,\n    payload: {\n      response: error\n    }\n  });\n}\n\nfunction* apiSaga() {\n  const actionQueue = yield actionChannel(\"API_INVOCATION\");\n\n  while (true) {\n    const action = yield take(actionQueue);\n    yield fork(invokeAPI, action);\n  }\n}\n\nexport { invokeAPI };\nexport default apiSaga;","map":{"version":3,"sources":["/Users/sharadchoudhary/Desktop/PracticeReactJsProject/PAM-fastie/src/Store/saga/apiSaga.js"],"names":["CancelToken","actionChannel","take","fork","call","put","getAxios","logout","pendingRequests","similarPendingRequestExist","actionType","url","invokeAPI","action","payload","method","data","apiConfig","resolve","reject","setStartLoader","response","api","console","log","Error","source","cancelToken","token","get","post","patch","delete","status","Number","dispatchFulfilled","dispatchRejected","error","logoutUser","resetUserProfile","clearCartData","setStopLoader","type","actualAction","apiSaga","actionQueue"],"mappings":"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","sourcesContent":["import { CancelToken } from \"axios\";\nimport { actionChannel, take, fork, call, put } from \"redux-saga/effects\";\nimport getAxios from \"./axiosAPI\";\n// import { setStartLoader, setStopLoader } from \"../action/loader\";\nimport { logout } from \"../../utils/token\";\n// import { setPageLoaderStop, setPageLoaderStart, showToastMessage } from \"../action/loader/loader\";\n// import { logoutUser, resetUserProfile, clearCartData } from \"../action/user\";\n\nconst pendingRequests = {};\n\nconst similarPendingRequestExist = (actionType, url) =>\n  pendingRequests[actionType] && pendingRequests[actionType].url === url;\n\nfunction* invokeAPI(action) {\n  const { payload } = action;\n  const {\n    method,\n    url,\n    data,\n    apiConfig,\n    action: actionType,\n    resolve,\n    reject,\n  } = payload;\n  try {\n    if (action.payload.action !== \"ADD_TO_CART\") {\n      yield put(setStartLoader());\n    }\n    let response = {};\n    const api = getAxios();\n    console.log(api)\n    debugger\n    switch (method) {\n      case \"GET\": {\n        if (similarPendingRequestExist(actionType, url)) {\n          throw new Error(\"Similar axios request detected!\");\n        } else {\n          const source = CancelToken.source();\n          const cancelToken = source.token;\n          pendingRequests[actionType] = { url, api, source };\n\n          response = yield call([api, api.get], url, {\n            ...apiConfig,\n            cancelToken,\n          });\n        }\n        break;\n      }\n      case \"POST\":\n        response = yield call([api, api.post], url, data, { ...apiConfig });\n        break;\n\n      case \"PUT\":\n        response = yield call([api, api.put], url, data, { ...apiConfig });\n        break;\n\n      case \"PATCH\":\n        response = yield call([api, api.patch], url, data, { ...apiConfig });\n        break;\n\n      case \"DELETE\":\n        response = yield call(\n          [api, api.delete],\n          url,\n          { data },\n          { ...apiConfig }\n        );\n        break;\n\n      default:\n        throw new Error(`API method ${method} is not supported!`);\n    }\n    // debugger;\n    if (response.status === Number(200) || response.status === Number(201)) {\n      yield* dispatchFulfilled(action, response.data);\n      // yield put(showToastMessage({ message: _get(response, 'data.message', ''), type: _get(response, 'data.type', '') }));\n    } else {\n      yield* dispatchRejected(payload.action, action, \"Internal server error\");\n      // yield put(showToastMessage({ message: 'Internal error, Try again', type: 'error' }));\n    }\n    delete pendingRequests[actionType];\n    if (resolve) {\n      resolve(response.data);\n    }\n  } catch (error) {\n    if (error.response && error.response.status === 401) {\n      yield put(logoutUser());\n      yield put(resetUserProfile());\n      yield put(clearCartData());\n      logout();\n    }\n    yield* dispatchRejected(payload.action, action, error);\n    if (reject) {\n      reject(error);\n    }\n    // yield put(showToastMessage({ message: 'Internal error, Try again', type: 'error' }));\n  } finally {\n    yield put(setStopLoader());\n  }\n}\n\nfunction* dispatchFulfilled(action, response) {\n  yield put({ type: `${action.payload.action}_SUCCESS`, payload: response });\n}\n\nfunction* dispatchRejected(actionType, action, error) {\n  yield put({\n    type: `${actionType}_ERROR`,\n    actualAction: action,\n    payload: { response: error },\n  });\n}\n\nfunction* apiSaga() {\n  const actionQueue = yield actionChannel(\"API_INVOCATION\");\n  while (true) {\n    const action = yield take(actionQueue);\n    yield fork(invokeAPI, action);\n  }\n}\n\nexport { invokeAPI };\nexport default apiSaga;\n"]},"metadata":{},"sourceType":"module"}