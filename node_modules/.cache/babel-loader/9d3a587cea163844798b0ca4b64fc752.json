{"ast":null,"code":"var _jsxFileName = \"/Users/sharadchoudhary/Desktop/PracticeReactJsProject/PAM-fastie/src/View/ViewDrawer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Drawer, DrawerBody, DrawerFooter, DrawerHeader, DrawerOverlay, DrawerContent, DrawerCloseButton, useDisclosure, Flex, Box, Spacer, Text, Stack, Radio, RadioGroup, CheckboxGroup, Checkbox } from \"@chakra-ui/react\";\nimport _ from \"lodash\";\nimport ProductCustomizationDrawer from '../Container/ProductCustomizationDrawer/ProductCustomizationDrawer';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ViewDrawer = () => {\n  _s();\n\n  const [value, setValue] = React.useState(1);\n  const [checkBoxValue, setCheckBoxValue] = React.useState([3]);\n\n  const handleCheckBox = Value => {\n    let SelectedValue = parseInt(Value);\n\n    let dataInCheckBox = _.cloneDeep(checkBoxValue);\n\n    if (dataInCheckBox.includes(SelectedValue)) {\n      const index = dataInCheckBox.indexOf(SelectedValue);\n      dataInCheckBox.splice(index, 1);\n      setCheckBoxValue(dataInCheckBox);\n    } else {\n      dataInCheckBox.push(SelectedValue);\n      setCheckBoxValue(dataInCheckBox);\n    }\n  };\n\n  const data = [{\n    id: 1,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }, {\n    id: 2,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }, {\n    id: 3,\n    type: 'checkbox',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT EXTRAS'\n  }, {\n    id: 4,\n    type: 'checkbox',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT EXTRAS'\n  }, {\n    id: 5,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }, {\n    id: 6,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }, {\n    id: 7,\n    type: 'checkbox',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT '\n  }, {\n    id: 8,\n    type: 'checkbox',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT '\n  }];\n\n  let groupData = _.groupBy(data, \"customisationTag\");\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ProductCustomizationDrawer, {\n      children: Object.keys(groupData).map((customisationTag, index) => {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            my: \"25px\",\n            fontWeight: \"extrabold\",\n            children: customisationTag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            value: value,\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              children: groupData[customisationTag].map((data, index) => {\n                if (data.type == 'radio') {\n                  return /*#__PURE__*/_jsxDEV(Radio, {\n                    onChange: () => setValue(data.id),\n                    isChecked: data.id == value ? true : false,\n                    value: data.id,\n                    colorScheme: \"green\",\n                    children: [/*#__PURE__*/_jsxDEV(Text, {\n                      children: data.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 56,\n                      columnNumber: 147\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 56,\n                    columnNumber: 25\n                  }, this);\n                } else {\n                  return null;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(CheckboxGroup, {\n            colorScheme: \"green\",\n            value: checkBoxValue,\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              children: groupData[customisationTag].map((data, index) => {\n                if (data.type == \"checkbox\") {\n                  return /*#__PURE__*/_jsxDEV(Checkbox, {\n                    isChecked: checkBoxValue.includes(data.id) ? true : false,\n                    onChange: e => handleCheckBox(e.target.value),\n                    value: data.id,\n                    children: /*#__PURE__*/_jsxDEV(Text, {\n                      children: data.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 67,\n                      columnNumber: 159\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 67,\n                    columnNumber: 25\n                  }, this);\n                } else {\n                  return null;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n\n_s(ViewDrawer, \"rhKxd0vNe92LoJw11ch5KI2KMdQ=\");\n\n_c = ViewDrawer;\nexport default ViewDrawer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewDrawer\");","map":{"version":3,"sources":["/Users/sharadchoudhary/Desktop/PracticeReactJsProject/PAM-fastie/src/View/ViewDrawer.js"],"names":["React","useState","Drawer","DrawerBody","DrawerFooter","DrawerHeader","DrawerOverlay","DrawerContent","DrawerCloseButton","useDisclosure","Flex","Box","Spacer","Text","Stack","Radio","RadioGroup","CheckboxGroup","Checkbox","_","ProductCustomizationDrawer","ViewDrawer","value","setValue","checkBoxValue","setCheckBoxValue","handleCheckBox","Value","SelectedValue","parseInt","dataInCheckBox","cloneDeep","includes","index","indexOf","splice","push","data","id","type","name","customisationTag","groupData","groupBy","Object","keys","map","e","target"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  Flex, Box, Spacer, Text, Stack, Radio, RadioGroup, CheckboxGroup, Checkbox,\n} from \"@chakra-ui/react\"\nimport _ from \"lodash\";\nimport ProductCustomizationDrawer from '../Container/ProductCustomizationDrawer/ProductCustomizationDrawer'\nconst ViewDrawer = () => {\n  const [value, setValue] = React.useState(1)\n  const [checkBoxValue, setCheckBoxValue] = React.useState([3])\n  const handleCheckBox = (Value) => {\n    let SelectedValue = parseInt(Value)\n    let dataInCheckBox = _.cloneDeep(checkBoxValue)\n    if (dataInCheckBox.includes(SelectedValue)) {\n      const index = dataInCheckBox.indexOf(SelectedValue)\n      dataInCheckBox.splice(index, 1);\n      setCheckBoxValue(dataInCheckBox)\n    }\n    else {\n      dataInCheckBox.push(SelectedValue)\n      setCheckBoxValue(dataInCheckBox)\n\n    }\n  }\n  const data = [\n    { id: 1, type: 'radio', name: 'Extra Cheese', customisationTag: 'SELECT ANY ONE' },\n    { id: 2, type: 'radio', name: 'Extra Cheese', customisationTag: 'SELECT ANY ONE' },\n    { id: 3, type: 'checkbox', name: 'Extra Cheese', customisationTag: 'SELECT EXTRAS' },\n    { id: 4, type: 'checkbox', name: 'Extra Cheese', customisationTag: 'SELECT EXTRAS' },\n    { id: 5, type: 'radio', name: 'Extra Cheese', customisationTag: 'SELECT ANY ONE' },\n    { id: 6, type: 'radio', name: 'Extra Cheese', customisationTag: 'SELECT ANY ONE' },\n    { id: 7, type: 'checkbox', name: 'Extra Cheese', customisationTag: 'SELECT ' },\n    { id: 8, type: 'checkbox', name: 'Extra Cheese', customisationTag: 'SELECT ' },\n\n  ]\n  let groupData = _.groupBy(data, \"customisationTag\");\n  return (\n    <>\n      <ProductCustomizationDrawer >\n        {Object.keys(groupData).map((customisationTag, index) => {\n          return (\n            <Box>\n              <Text my=\"25px\" fontWeight=\"extrabold\">{customisationTag}</Text>\n              <RadioGroup value={value}>\n                <Stack>\n                  {groupData[customisationTag].map((data, index) => {\n                    if (data.type == 'radio') {\n                      return (\n                        <Radio onChange={() => setValue(data.id)} isChecked={data.id == value ? true : false} value={data.id} colorScheme=\"green\"><Text>{data.name}</Text> </Radio>\n                      )\n                    } else { return null }\n                  })}\n                </Stack>\n              </RadioGroup>\n              <CheckboxGroup colorScheme=\"green\" value={checkBoxValue}>\n                <Stack>\n                  {groupData[customisationTag].map((data, index) => {\n                    if (data.type == \"checkbox\") {\n                      return (\n                        <Checkbox isChecked={checkBoxValue.includes(data.id) ? true : false} onChange={(e) => handleCheckBox(e.target.value)} value={data.id}><Text>{data.name}</Text>\n                        </Checkbox>\n                      )\n                    } else { return null }\n                  })}\n                </Stack>\n              </CheckboxGroup>\n            </Box>\n          )\n        })}\n      </ProductCustomizationDrawer>\n    </>\n  )\n}\n\nexport default ViewDrawer\n"]},"metadata":{},"sourceType":"module"}