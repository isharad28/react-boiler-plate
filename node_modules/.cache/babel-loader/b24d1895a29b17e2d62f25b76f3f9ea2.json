{"ast":null,"code":"var _jsxFileName = \"/Users/sharadchoudhary/Desktop/PracticeReactJsProject/fastie/src/View/ViewDrawer.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Drawer, DrawerBody, DrawerFooter, DrawerHeader, DrawerOverlay, DrawerContent, DrawerCloseButton, useDisclosure, Flex, Box, Spacer, Text, Stack, Radio, RadioGroup, CheckboxGroup, Checkbox } from \"@chakra-ui/react\";\nimport ProductCustomizationDrawer from '../Container/ProductCustomizationDrawer/ProductCustomizationDrawer';\nimport _ from \"lodash\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst ViewDrawer = () => {\n  _s();\n\n  const [value, setValue] = React.useState(1);\n  const data = [{\n    id: 1,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }, {\n    id: 2,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }, {\n    id: 3,\n    type: 'checkbox',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT EXTRAS'\n  }, {\n    id: 4,\n    type: 'checkbox',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT EXTRAS'\n  }, {\n    id: 5,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }, {\n    id: 6,\n    type: 'radio',\n    name: 'Extra Cheese',\n    customisationTag: 'SELECT ANY ONE'\n  }];\n\n  let groupData = _.groupBy(data, \"customisationTag\");\n\n  console.log(groupData, \"groupData\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(ProductCustomizationDrawer, {\n      children: Object.keys(groupData).map((customisationTag, index) => {\n        return /*#__PURE__*/_jsxDEV(Box, {\n          children: [/*#__PURE__*/_jsxDEV(Text, {\n            my: \"25px\",\n            fontWeight: \"extrabold\",\n            children: customisationTag\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(RadioGroup, {\n            defaultValue: 1,\n            onChange: setValue,\n            value: value,\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              children: groupData[customisationTag].map((data, index) => {\n                if (data.type == \"radio\") {\n                  return /*#__PURE__*/_jsxDEV(Radio, {\n                    value: data.id,\n                    colorScheme: \"green\",\n                    children: [/*#__PURE__*/_jsxDEV(Text, {\n                      children: data.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 42,\n                      columnNumber: 60\n                    }, this), \" \"]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 42,\n                    columnNumber: 17\n                  }, this);\n                } else {\n                  return null;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 38,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CheckboxGroup, {\n            colorScheme: \"green\",\n            defaultValue: [3],\n            children: /*#__PURE__*/_jsxDEV(Stack, {\n              children: groupData[customisationTag].map((data, index) => {\n                if (data.type == \"checkbox\") {\n                  return /*#__PURE__*/_jsxDEV(Checkbox, {\n                    value: data.id,\n                    children: /*#__PURE__*/_jsxDEV(Text, {\n                      children: data.name\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 52,\n                      columnNumber: 43\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 52,\n                    columnNumber: 17\n                  }, this);\n                } else {\n                  return null;\n                }\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 12\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n\n_s(ViewDrawer, \"MsrhBkqyAB9WP9mZZ5qdqbK8EhY=\");\n\n_c = ViewDrawer;\nexport default ViewDrawer;\n\nvar _c;\n\n$RefreshReg$(_c, \"ViewDrawer\");","map":{"version":3,"sources":["/Users/sharadchoudhary/Desktop/PracticeReactJsProject/fastie/src/View/ViewDrawer.js"],"names":["React","useState","Drawer","DrawerBody","DrawerFooter","DrawerHeader","DrawerOverlay","DrawerContent","DrawerCloseButton","useDisclosure","Flex","Box","Spacer","Text","Stack","Radio","RadioGroup","CheckboxGroup","Checkbox","ProductCustomizationDrawer","_","ViewDrawer","value","setValue","data","id","type","name","customisationTag","groupData","groupBy","console","log","Object","keys","map","index"],"mappings":"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","sourcesContent":["import React,{useState} from 'react'\nimport {\n  Drawer,\n  DrawerBody,\n  DrawerFooter,\n  DrawerHeader,\n  DrawerOverlay,\n  DrawerContent,\n  DrawerCloseButton,\n  useDisclosure,\n  Flex, Box, Spacer, Text, Stack, Radio, RadioGroup, CheckboxGroup, Checkbox,\n} from \"@chakra-ui/react\"\nimport ProductCustomizationDrawer from '../Container/ProductCustomizationDrawer/ProductCustomizationDrawer'\nimport _ from \"lodash\";\nconst ViewDrawer = () => {\n  const [value, setValue] = React.useState(1)\n\n  const data=[\n    {id:1,type:'radio',name:'Extra Cheese',customisationTag:'SELECT ANY ONE'},\n    {id:2,type:'radio',name:'Extra Cheese',customisationTag:'SELECT ANY ONE'},\n    {id:3,type:'checkbox',name:'Extra Cheese',customisationTag:'SELECT EXTRAS'},\n    {id:4,type:'checkbox',name:'Extra Cheese',customisationTag:'SELECT EXTRAS'},\n    {id:5,type:'radio',name:'Extra Cheese',customisationTag:'SELECT ANY ONE'},\n    {id:6,type:'radio',name:'Extra Cheese',customisationTag:'SELECT ANY ONE'},\n  ]\n  let groupData = _.groupBy(data, \"customisationTag\");\n  console.log(groupData,\"groupData\")\n  return (\n    <>\n  \n    <ProductCustomizationDrawer>\n       {Object.keys(groupData).map((customisationTag,index)=>{\n         \n         return(\n            <Box>\n            <Text my=\"25px\" fontWeight=\"extrabold\">{customisationTag}</Text>\n            <RadioGroup defaultValue={1} onChange={setValue} value={value}>\n            <Stack>\n            {groupData[customisationTag].map((data,index)=>{\n              if(data.type==\"radio\"){\n              return(\n                <Radio value={data.id} colorScheme=\"green\"><Text>{data.name}</Text> </Radio>\n              )}else{return null}\n              })}\n           </Stack>\n           </RadioGroup>\n           <CheckboxGroup colorScheme=\"green\" defaultValue={[3]}>\n                <Stack>\n                {groupData[customisationTag].map((data,index)=>{\n              if(data.type==\"checkbox\"){\n               return(\n                <Checkbox value={data.id}><Text>{data.name}</Text></Checkbox>\n                )}else{ return null}\n              })}\n                </Stack>\n              </CheckboxGroup>\n          </Box>\n          )\n       })}\n      </ProductCustomizationDrawer>\n    </>\n  )\n}\n\nexport default ViewDrawer\n"]},"metadata":{},"sourceType":"module"}